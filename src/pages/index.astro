---
import '../styles/home.css';
import PageLayout from '../layouts/page.astro';

const pageTitle = "About Me";
---

<style>
body {
    overflow: hidden;
    background: black;
}
#canvas1 {
    position: absolute;
    left: 0;
    top: 0;
}
</style>
<canvas id="canvas1"></canvas>
<PageLayout title={pageTitle}>
  <div class="mb-24 mt-6 flex flex-col items-center justify-center px-6 pt-20">
    <div class="flex w-full max-w-4xl flex-col gap-36 print:gap-10">
      <div class="flex flex-col gap-6 print:mt-10 print:gap-2">
        <h1 class="text-3xl md:text-6xl" style="font-variation-settings: 'wdth' 125;">
          <span class="font-black">Guido</span>
          <span class="font-extralight">Genzone</span>
        </h1>
        <h2 class="md:text-xl">Software engineer</h2>
      </div>

      <div class="leading-loose [&amp;_a]:font-bold [&amp;_a]:underline">
        <p>I'm <strong>Guido</strong>, a freelance software engineer, living in Spain.</p>
        <p>Currently I'm working for <a class="underline font-bold" href="https://bodycad.com/" target="_blank" rel="noreferrer nofollow">Bodycad</a>.</p>
        <p>My open-source projects and experiments are available on <a class="underline font-bold" href="https://github.com/ggenzone" target="_blank" rel="noreferrer nofollow">GitHub</a>.</p>
      </div>
    </div>
  </div>



  <script>
const canvas = document.getElementById('canvas1')
const ctx = canvas.getContext('2d')

let adjustX = 10
let adjustY = 0
canvas.width = window.innerWidth
canvas.height = window.innerHeight

let particlesArray = []

const mouse = {
    x: null,
    y: null,
    radius: 250
}

window.addEventListener('mousemove', function (event) {
    mouse.x = event.x
    mouse.y = event.y
})

function getTextColor() {
    return document.documentElement.classList.contains('dark') ? 'black' : 'black';
}

ctx.font = '15px Verdana'
ctx.fillStyle = getTextColor();
ctx.fillText('Guido Genzone', 0, 40) 
//ctx.strokeStyle = 'white'
//ctx.strokeRect(0,0,80,80)
const textCoordinates = ctx.getImageData(0,0,140,140)


class Particle {
    constructor(x, y) {
        this.x = x
        this.y = y
        this.size = 3
        this.baseX = this.x
        this.baseY = this.y
        this.density = (Math.random() * 40) + 5
        this.color = 'white'
    }

    draw() {
        ctx.fillStyle = this.color
        ctx.beginPath()
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2)
        ctx.fill()
    }

    update() {
        let dx = mouse.x - this.x 
        let dy = mouse.y - this.y 
        let distance = Math.sqrt(dx * dx + dy * dy)
        let forceDirectionX = dx / distance
        let forceDirectionY = dy / distance
        let maxDistance = mouse.radius
        let force = (maxDistance - distance) / maxDistance
        let directionX = forceDirectionX * force * this.density
        let directionY = forceDirectionY * force * this.density
        if (distance < mouse.radius) {
            const mapDistanceToColor = (((force * 127) + 128))
            const red = 0
            const green = mapDistanceToColor
            const blue = 0
            this.color = `rgb(${red}, ${green}, ${blue})`
            this.x -= directionX
            this.y -= directionY
            // this.size = 30
        } else {
            this.color = 'white'
            if (this.x !== this.baseX) {
                let dx = this.x - this.baseX
                this.x -= dx/10
            }
            if (this.y !== this.baseY) {
                let dy = this.y - this.baseY
                this.y -= dy/10
            }
        }
    }
}

function init() {
    particlesArray = []

    for (let y = 0, y2 = textCoordinates.height; y < y2; y++ ) {
        for (let x = 0, x2 = textCoordinates.width; x < x2; x++ ) {
            if (textCoordinates.data[(4*y*textCoordinates.width)+ 4*x + 3] > 128) {
                let positionX = x + adjustX
                let positionY = y + adjustY
                particlesArray.push(new Particle(positionX * 10, positionY * 10))
            }
        }
    }

    /*
    for(let i = 0; i < 1000; i++) {
        const x = Math.random() * canvas.width
        const y = Math.random() * canvas.height
        particlesArray.push(new Particle(x,y))

    }*/
}

init()

function animate () {
    ctx.clearRect(0,0, canvas.width, canvas.height)
    for (let i = 0; i < particlesArray.length; i++) {
        particlesArray[i].draw()
        particlesArray[i].update()
    }
    connect()
    requestAnimationFrame(animate)
}

animate()


function connect() {
    let opacityValue = 1
    for (let a=0; a< particlesArray.length; a++) {
        for (let b=a; b < particlesArray.length; b++) {
            let dx = particlesArray[a].x - particlesArray[b].x
            let dy = particlesArray[a].y - particlesArray[b].y
            let distance = Math.sqrt(dx * dx + dy * dy)

           if (distance < 30) {
                opacityValue = 1 - (distance/30)
                ctx.strokeStyle = `rgba(255,255,255,${opacityValue})`
                ctx.lineWidth = 1
                ctx.beginPath()
                ctx.moveTo(particlesArray[a].x, particlesArray[a].y)
                ctx.lineTo(particlesArray[b].x, particlesArray[b].y)
                ctx.stroke()
           }
        }
    }
}
</script>
</PageLayout>